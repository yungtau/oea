<?xml version="1.0" encoding="utf-8"?>
<topic id="c8e6cd25-c674-4cd1-9880-816d11f58eb8" revisionNumber="1">
    <developerConceptualDocument
      xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
      xmlns:xlink="http://www.w3.org/1999/xlink">

        <introduction>
            <autoOutline />
        </introduction>

        <section address="intro">
            <title>简介</title>
            <content>
                <para>
                    领域实体框架是一个 ORM 框架，可脱离 Rafy 框架其它组件单独运行，为开发人员提供了极高的开发效率、强大的功能。同时集领域驱动设计、面向服务架构、模型驱动架构、产品线工程方法于一身，是 Rafy 框架中其它组件（如界面生成等高级功能）的基础。
                </para>
            </content>
        </section>

        <section address="appTypes">
            <title>支持的应用程序类型</title>
            <content>
                <para>领域实体框架在设计初就已经考虑到了各种可能会被使用的应用程序类型。目前已经在很多类型的真实项目中被使用过它，稳定，高效：</para>
                <list class="bullet">
                    <listItem>
                        <para>单机应用程序</para>
                        <para>简单的一些本地程序，一般使用 SQLCE 文件型数据库。也可以连接其它服务器上的 SQLServer、Oracle 等。</para>
                    </listItem>
                    <listItem>
                        <para>互联网网站开发</para>
                        <para>与单机应用程序类似，在互联网网站中直连数据库。</para>
                    </listItem>
                    <listItem>
                        <para>分布式应用程序</para>
                        <para>领域实体本身可直接用于分布式传输，所以可以非常方便地开发客户端+服务端(C/S)程序。可配合 Rafy 的界面生成功能，开发效率非常高。</para>
                    </listItem>
                    <listItem>
                        <para>企业内部网站开发</para>
                        <para>与单机应用程序类似，在企业内部网站开发中直连数据库。可配合 Rafy 的界面生成功能，开发效率非常高。</para>
                    </listItem>
                </list>
            </content>
        </section>

        <section address="td">
            <title>特点</title>
            <content>
                <list class="bullet">
                    <listItem>
                        <para>领域驱动设计</para>
                        <para>
                            相对于一些注重概念、使用复杂的 DDD 框架，Rafy 更加注重实践。实现了 DDD 中与实际开发结合紧密的重要概念：聚合实体、标识、仓库、服务、分层架构、CQRS，同时保证了开发的易用性。详情参见：<link xlink:href="f4f5c2f5-638a-456a-9c8d-1e1854c63002" />。
                        </para>
                        <para>
                            实体基类的设计支持关系的延迟加载、自动冗余属性、大对象属性、数据绑定、树型实体等。详情见：<link xlink:href="e9998e68-31e8-47d6-9e28-829aade5044e" />。
                        </para>
                        <para>
                            实体使用了自定义属性系统（托管属性框架）。这使得运行时可以不再使用反射，而是使用内置的属性管理方式，运行效率更高。同时，这些属性的 API 直接公布，更方便开发人员编写面向自己应用的框架。详情见：<link xlink:href="8c0065bc-f165-4c69-81f4-9c3c57bd9ab9" />。
                        </para>
                        <para>
                            仓库基类则实现了组合实体的添加、删除、修改，并提供了大量的默认查询。详情见：<link xlink:href="6b377084-3fc9-4bf6-94d7-bc9a42ed82a7" />。
                        </para>
                        <para>
                            领域服务是跨组合实体的业务逻辑的封装体，也是 SOA 架构的基础。详情见：<link xlink:href="d7551c01-4f62-4e6b-8fd7-4de371df6bdf" />。
                        </para>
                    </listItem>
                    <listItem>
                        <para>CodeFirst 开发模式</para>
                        <para>使用 Rafy 领域实体框架，采用 CodeFirst 开发模式，可以使得开发人员在开发过程中只关心领域实体的关系、属性，而不需要关心数据库结构的变化。</para>
                        <para>在开发过程中，只需要配置好数据库连接后，建库、建表、建字段都会由 Rafy 完成。实体结构上的变化：类型、属性、关系，都会由 Rafy 自动同步到数据库上。相对于传统的三层应用程序，在实体中添加、删除一个字段，开发人员不再需要修改应用程序的数据库、DAL、BLL代码，而由框架自动同步，大大提高了开发效率。</para>
                        <para>同时，生成的数据库满足第三泛式的要求。</para>
                        <para>
                            详情参见：<link xlink:href="b40cd779-ec8a-469d-82f5-bd99128561c4" />。
                        </para>
                    </listItem>
                    <listItem>
                        <para>多数据库支持</para>
                        <para>Rafy 领域实体框架支持把同一份实体代码映射到多种数据库。目前已经支持了 SqlServer 2005-2012、Oracle10，以及文件型数据库 SQLCE4。其它数据库的支持也在研发中。</para>
                        <para>
                            详情参见：<link xlink:href="ef53c777-dd02-4a01-98c9-7dcc49489cec" />。
                        </para>
                    </listItem>
                    <listItem>
                        <para>支持部署为单机、分布式</para>
                        <para>使用 Rafy 编写的实体、服务，原生支持分布式部署。即可以部署为直接连接数据库，也可以部署为客户端通过服务器间接访问数据库。Rafy 基于自定义的托管属性框架，在对实体进行序列化时，不会传输实体中默认的数据，提高了数据传输的效率。</para>
                        <para>
                            详情参见：<link xlink:href="f55333b8-3524-4a07-99bc-6a1cdb6be6b4" />。
                        </para>
                    </listItem>
                    <listItem>
                        <para>零配置</para>
                        <para>框架的使用对开发人员要求非常简单，默认情况下基本不需要作任何配置。这样提高了开发的效率。</para>
                        <para>Rafy 框架的快速开发思想之一是支持默认值，尽量少使用配置。在必要时，仅需非常少的配置即可达到运行时的灵活变化。</para>
                    </listItem>
                    <listItem>
                        <para>与 VS 集成</para>
                        <para>Rafy 的一个重要作用就是为了提升开发效率，所以我们为 VisualStudio 开发了 RafySDK 插件，其中包含项目模板、代码生成、领域建模等功能。一体化的开发环境，可以更加快速地开发 Rafy 应用程序。</para>
                    </listItem>
                    <listItem>
                        <para>稳定、质量有保障</para>
                        <para>
                            领域实体框架的代码行有 4 万多行。为了保证框架质量，我们为框架编写了 200 多个单元测试，以测试框架的各个功能。
                        </para>
                    </listItem>
                    <!--
                    <listItem>
                    </listItem><listItem>
                        <para>客户端、服务端缓存？？？</para>
                    </listItem>-->
                </list>
            </content>
        </section>

        <section address="comToEF">
            <title>优势</title>
            <content>
                <para>与 EF、NH 等传统 ORM 框架相比，使用 Rafy 领域实体框架的优势在于：</para>
                <list class="bullet">
                    <listItem>
                        <para>传统 ORM 只是为了解决面向对象与关系数据库的映射，而 Rafy 解决的是领域实体与关系数据库的映射。</para>
                    </listItem>
                    <listItem>
                        <para>传统 ORM 只做数据处理，开发人员不得不继续考虑很多其它的问题，例如分层架构、分布式传输、远程懒加载、界面数据绑定等功能；而 Rafy 则提供了一体化解决方案，包括：仓库设计、分布式设计、托管属性设计、服务设计、界面绑定设计等。</para>
                    </listItem>
                </list>
            </content>
        </section>

        <relatedTopics>
        </relatedTopics>
    </developerConceptualDocument>
</topic>
