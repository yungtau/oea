<?xml version="1.0" encoding="utf-8"?>
<topic id="e0e55ab2-1e48-4acd-96ef-c889774bfecc" revisionNumber="1">
    <developerConceptualDocument
      xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
      xmlns:xlink="http://www.w3.org/1999/xlink">

        <introduction>
            <para>本节说明 Rafy 中实体间存在的几种关系，以及它们的使用场景。</para>
            <!--<list class="bullet">
                <listItem>
                    <para>继承</para>
                </listItem>
                <listItem>
                    <para>组合</para>
                </listItem>
                <listItem>
                    <para>父引用</para>
                </listItem>
                <listItem>
                    <para>非空引用</para>
                </listItem>
                <listItem>
                    <para>可空引用</para>
                </listItem>
                <listItem>
                    <para>聚合(beta)</para>
                </listItem>
                <listItem>
                    <para>子引用(beta)</para>
                </listItem>
            </list>-->
            <autoOutline />
        </introduction>

        <section address="graph">
            <title>关系图例</title>
            <content>
                <para>先来看一下 Rafy 中常用的几种关系：</para>
                <mediaLink>
                    <image xlink:href="实体关系_AllRelations"/>
                </mediaLink>
                <list class="bullet">
                    <listItem>
                        <para>非空引用关系：连接实线。如图中的：Creator、Replier。</para>
                    </listItem>
                    <listItem>
                        <para>可空引用关系：连接虚线。如图中的：Category。</para>
                    </listItem>
                    <listItem>
                        <para>继承关系：以空心三角结尾的连接线。例如图中 Activity 到 EJEntity 的关系。</para>
                    </listItem>
                    <listItem>
                        <para>组合关系：以实心三角结尾的连接线。如图中的：ActivityReplyList。</para>
                    </listItem>
                </list>
                <para>有关 odml 关系图的内容，参见：<link xlink:href="640ac9bb-0090-4b38-9763-bad4fca3adfb" />。</para>
            </content>
        </section>

        <section address="inheritance">
            <title>继承</title>
            <content>
                <para>继承关系与 CLR 的继承关系一致。继承后，子实体类可获利父实体类的属性、方法。</para>
                <para>
                    关于实体继承后的数据表映射，详见：<link xlink:href="8b3a3b78-9e6a-4558-938d-7692ae6aaa8f" />
                </para>
            </content>
        </section>

        <section address="reference">
            <title>引用关系</title>
            <content>
                <para>引用关系是一种常用的多对一关系。可以表示诸如：“A使用B”、“A按B分类” 等概念。</para>
                <para>引用关系分可空引用、不可空引用。</para>
                <para>
                    对于如果编写引用关系，参见：<link xlink:href="bae4aeb4-e6a9-4d1f-9bbd-1a4199303ba5" />。
                </para>
            </content>
        </section>

        <section address="composition">
            <title>组合</title>
            <content>
                <para>
                    组合关系是一种一对多关系，是最常用的一种父子关系。它表示一个实体类从属于另一实体类，两个实体类组合在一起，用于表示领域中一个具体的概念。
                    例如，在开发过程中，常常听说的主从表、父子表、主细表，都是这种结构。
                </para>
                <para>
                    这种关系对应 DDD 中的聚合关系，也对应 UML 中的组合关系。Rafy 中的组合实体，也就对应着 DDD 中的聚合实体。
                </para>
                <para>组合的特点：</para>
                <list class="bullet">
                    <listItem>
                        <para>从属关系。</para>
                    </listItem>
                    <listItem>
                        <para>一个组合中的子对象，必须在组合根对象存在之后才能存在，否则没有意义。</para>
                    </listItem>
                    <listItem>
                        <para>一旦组合根对象消亡，整个组合中的所有对象必须一同消亡。</para>
                    </listItem>
                </list>
                <alert class="note">
                    <para>到底使用聚合还是组合，设计时区分的主要原则是：如果父实体消亡时，子实体也必须消亡，那么使用组合关系，否则使用聚合关系。</para>
                    <para>但是这两种关系，在设计上并不是固定的。例如：汽车与轮胎，一般情况上是一起消亡的，所以使用组合。但是对于汽车生产企业来说，轮胎是可以先于汽车生产出来的，并可以独立存在，这时则不能使用组合。</para>
                </alert>
                <para>
                    在 Rafy 中，组合关系意味着组合父类可以获取组合子类的集合，同时组合子类可以获取其对应的组合父类的引用。
                    关系：如何编写代码来表示组合关系，参见：<link xlink:href="770d700d-acf8-40fd-abc2-a580725a14fb" />
                </para>
            </content>
        </section>

        <section address="aggregation">
            <title>聚合</title>
            <content>
                <para>
                    聚合关系是另一种一对多关系。相对于组合关系来说，聚合关系更加松散。 在 Rafy 中，这种关系并不直接被实现，而是把聚合转换为由组合和引用构成的。以下以用户与角色的关系设计为例说明。
                </para>
                <para>用户与角色是多对多的，一个用户拥有很多角色，一个角色下也有很多的用户。 对于这两个一对多关系，在实体关系的设计上，我们需要先分辨两个实体间的依赖关系。这里，假设我们认为用户依赖角色，也就是先存在用户，才会存在角色。那么，我们认为是用户聚合了角色。UML 图如下：</para>
                <mediaLink>
                    <image xlink:href="实体关系_User_Role_Aggregation"/>
                </mediaLink>
                <para>在 Rafy 中，我们把聚合关系实体化：</para>
                <mediaLink>
                    <image xlink:href="实体关系_User_Role_Composition"/>
                </mediaLink>
                <para>用户组合了实体：UserRole，而 UserRole 非空引用了一个 Role。一旦删除用户，这个用户对应的 UserRole 组合子实体也将被删除。如果角色还被某个用户使用时，则不能删除这个角色。同时，我们可以为这个 UserRole 实体添加许多的属性，表示这个关系的属性。例如可以添加一个“添加时间”属性，用于表示为用户添加这个角色的时间。</para>
                <alert class="note">
                    <para>
                        由于我们设计角色不依赖用户，所以不需要修改角色的实体结构。如果需要查找某个角色下的所有用户，则可以在角色的仓库类中添加相应的查询方法。应用层使用该方法来进行查询即可。仓库查询方法的编写，参见：<link xlink:href="59c80aec-c910-4880-b165-c3495ed5eb3e" />。
                    </para>
                </alert>
            </content>
        </section>

        <relatedTopics>
            <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
        </relatedTopics>
    </developerConceptualDocument>
</topic>
