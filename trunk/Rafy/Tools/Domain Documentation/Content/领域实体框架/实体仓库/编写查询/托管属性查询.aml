<?xml version="1.0" encoding="utf-8"?>
<topic id="02f40bcc-1ff3-4abc-b4a9-2dea57d516ce" revisionNumber="1">
    <developerConceptualDocument
      xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
      xmlns:xlink="http://www.w3.org/1999/xlink">
        <introduction>
            <autoOutline />
        </introduction>

        <section address="demo">
            <title>代码示例</title>
            <content>
                <para>
                    托管属性查询是直接面向实体托管属性类 <codeInline>IManagedProperty</codeInline> 进行查询的查询模式。框架提供了一系列方便的查询接口。示例：
                </para>
                <code language="cs">
                    <![CDATA[public WarehouseList GetByCode(string warehouseCode, string nameKeywords, PagingInfo pagingInfo)
{
    return this.FetchList(r => r.DA_GetByCode(warehouseCode, nameKeywords, pagingInfo));
}
private EntityList DA_GetByCode(string warehouseCode, string nameKeywords, PagingInfo pagingInfo)
{
    IPropertyQuery q = this.CreatePropertyQuery();

    //条件对比
    q.Constrain(Warehouse.CodeProperty).Equal(warehouseCode);
    if (!string.IsNullOrEmpty(nameKeywords))
    {
        q.And().Constrain(Warehouse.CodeProperty).Contains(nameKeywords);
    }

    q.JoinRef(Warehouse.AdministratorProperty);
    q.Constrain(User.NameProperty).Equal("admin");

    //排序
    q.OrderBy(Warehouse.IdProperty, OrderDirection.Descending);

    //以指定的分页信息分页
    q.Paging(pagingInfo);

    return this.QueryList(q);
}]]>
                </code>
                <para>
                    可以看到，查询中使用的都是属性的静态字段作为参数，如：<codeInline>Warehouse.CodeProperty、User.NameProperty</codeInline> 等，所以叫托管属性查询。
                </para>
                <para>
                    使用场景：一般情况下，建议使用 Linq 查询。如果要编写多个实体间通用的查询方法，才使用托管属性查询。
                </para>
            </content>
        </section>

        <section address="proQuery">
            <title>托管属性查询</title>
            <content>
                <para>相对于 Linq 查询，托管属性查询有以下好外：</para>
                <list class="bullet">
                    <listItem>
                        <para>可以编写多个实体间的通用查询。</para>
                        <para>托管属性查询不象 Linq 查询，它不需要使用确切的属性表达式，只需要使用属性的运行时对象 IManagedProperty 即可。这使得开发人员可以编写更加通用的查询。例如仓库基类 EntityRepository 中的所有查询方法，都是直接通过使用实体托管属性来实现的，例如：GetById、GetByParentId 等。</para>
                    </listItem>
                    <listItem>
                        <para>可以为扩展属性编写查询。</para>
                        <para>其它插件为当前插件定义的扩展属性，无法通过 Linq 表达式进行查询。</para>
                        <para>
                            关于扩展属性，参见：<link xlink:href="760ddc4e-6b70-4713-b173-c855a00e25d0" />。
                        </para>
                    </listItem>
                </list>
            </content>
        </section>

        <section address="linqToMP">
            <title>Linq 查询与托管属性查询的关系</title>
            <content>
                <para>Linq 查询是基于托管属性查询来实现的。实体查询的核心是托管属性查询。由于托管属性查询的易用性不强，所以框架又构建了 Linq 查询来为了方便开发人员直接使用实体的属性进行查询。</para>
                <para>
                    可以通过 <codeInline>IPropertyQuery.CombineLinq(IQueryable queryable)</codeInline> 方法，传入 Linq 查询对象把 Linq 查询转换为托管属性查询。
                </para>
            </content>
        </section>

        <section address="PropertiesMatchCriteria">
            <title>使用 PropertiesMatchCriteria 进行精确属性匹配</title>
            <content>
                <para>在查询时，我们常常期望对实体的一组属性中的每一个都进行精确匹配，这时可以使用 <codeInline>PropertiesMatchCriteria</codeInline> 类型来快速实现查询。例如，以下查询实现了同时通过编码和名称来查询指定的仓库：</para>
                <code language="cs">
                    <![CDATA[public Warehouse GetByCodeAndName(string warehouseCode, string warehouseName)
{
    return this.FetchFirst(new PropertiesMatchCriteria
    {
        { Warehouse.CodeProperty, warehouseCode },
        { Warehouse.NameProperty, warehouseName },
    });
}]]>
                </code>
                <para>以上代码，功能上完全等同于下面的查询：</para>
                <code language="cs">
                    <![CDATA[public Warehouse GetByCodeAndName(string warehouseCode, string warehouseName)
{
    return this.FetchFirst(r => r.DA_GetByCodeAndName(warehouseCode, warehouseName));
}
private EntityList DA_GetByCodeAndName(string warehouseCode, string warehouseName)
{
    IPropertyQuery q = this.CreatePropertyQuery();

    q.Constrain(Warehouse.CodeProperty).Equal(warehouseCode);
    q.And().Constrain(Warehouse.NameProperty).Contains(warehouseName);

    return this.QueryList(q);
}]]>
                </code>
            </content>
        </section>

        <relatedTopics>
        </relatedTopics>
    </developerConceptualDocument>
</topic>
