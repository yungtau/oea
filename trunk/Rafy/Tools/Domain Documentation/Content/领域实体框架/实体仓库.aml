<?xml version="1.0" encoding="utf-8"?>
<topic id="6b377084-3fc9-4bf6-94d7-bc9a42ed82a7" revisionNumber="1">
    <developerConceptualDocument
      xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
      xmlns:xlink="http://www.w3.org/1999/xlink">

        <introduction>
            <!--<para>实体仓库</para>-->
            <autoOutline />
        </introduction>

        <section address="sum">
            <title>简介</title>
            <content>
                <para>实体仓库是领域驱动设计中的重要概念，它的作用是管理实体，持久化并保存所有实体。实体的所有状态变更，都需要保存到仓库中去，包括新加实体、删除现有实体、修改实体的状态。同时，要获取任意一个实体，也需要通过实体仓库。</para>
                <para>
                    关于 DDD 的概念，参考：<link xlink:href="f4f5c2f5-638a-456a-9c8d-1e1854c63002" />。
                </para>
            </content>
        </section>

        <section address="demo">
            <title>仓库类型</title>
            <content>
                <para>仓库类型代码示例如下：</para>
                <code language="cs">
                    <![CDATA[/// <summary>
/// 仓库 仓库类。
/// 负责 仓库 类的查询、保存。
/// </summary>
public partial class WarehouseRepository : EntityRepository
{
    /// <summary>
    /// 单例模式，外界不可以直接构造本对象。
    /// </summary>
    protected WarehouseRepository() { }
    
    /// <summary>
    /// 此仓库存储实体对应的数据库连接配置名称。
    /// </summary>
    protected override string ConnectionStringSettingName
    {
        get { return "JXC"; }
    }
}]]>
                </code>
                <para>
                    仓库类型有以下特点：
                </para>
                <list class="bullet">
                    <listItem>
                        <para>每个实体都对应一个仓库类型。</para>
                    </listItem>
                    <listItem>
                        <para>仓库类型必须遵守以下命名约定：仓库类型名称 = 实体类型名称 + "Repository"。</para>
                    </listItem>
                    <listItem>
                        <para>
                            仓库类型必须直接或间接继承自 <codeInline>EntityRepository</codeInline> 类型。
                        </para>
                    </listItem>
                    <listItem>
                        <para>实体仓库，被设计为单例模式。</para>
                        <para>即每个实体的仓库，在整个系统中只有唯一一个运行时对象。仓库类型的构建函数不能公开，通过仓库工厂来获取仓库对象。</para>
                    </listItem>
                    <listItem>
                        <para>每个实体仓库，对应唯一一个连接字符串配置名称，需要重写 ConnectionStringSettingName 属性提供。</para>
                        <para>此配置是对应应用程序配置文件中的以下配置节名：</para>
                        <code language="xml">
<![CDATA[<connectionStrings>
    <add name="JXC" connectionString="Data Source=Data\JXC.sdf" providerName="System.Data.SqlServerCe" />
</connectionStrings>]]>
                        </code>
                        <para>对应同一数据库的所有实体，一般需要申明一个仓库基类，在基类中重写此属性。</para>
                    </listItem>
                </list>
            </content>
        </section>

        <section address="factory">
            <title>仓库工厂</title>
            <content>
                <para>
                    由于仓库是单例的，在整个系统运行时只存在一个对象。所以我们需要通过仓库工厂来获取唯一的这个仓库对象。
                    <codeInline>RF</codeInline> 类型即是仓库工厂，全称是 RepositoryFactory。由于仓库工厂使用频率太大，所以使用拼音缩写。（另外，如果使用中觉得缩写不方便，框架提供了同样功能、全称的 RepositoryFactory 类型。）
                </para>
                <para>我们可以通过该类的以下两个方法来获取指定的仓库对象：</para>
                <list class="bullet">
                    <listItem>
                        <para>直接通过指定的仓库类型来获取其运行时仓库对象：</para>
                        <para><![CDATA[public static TRepository Concrete<TRepository>() where TRepository : EntityRepository]]></para>
                    </listItem>
                    <listItem>
                        <para>通过实体类型来获取其唯一的仓库：</para>
                        <para><![CDATA[public static EntityRepository Find(Type entityType)]]></para>
                    </listItem>
                </list>
                <para>
                    建议通过 <codeInline>Concrete</codeInline> 方法获取仓库，该方法经过优化，速度比 <codeInline>Find</codeInline> 方法要快许多。
                </para>
                <code language="cs">
                    <![CDATA[CarRepository carRepo = RF.Concrete<CarRepository>();]]>
                </code>
            </content>
        </section>

        <relatedTopics>
        </relatedTopics>
    </developerConceptualDocument>
</topic>
