<?xml version="1.0" encoding="utf-8"?>
<topic id="853673c9-7c40-4679-b139-a3e7e3cec8ef" revisionNumber="1">
    <developerConceptualDocument
      xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
      xmlns:xlink="http://www.w3.org/1999/xlink">

        <introduction>
            <para>为了实现对复杂业务逻辑的处理，框架基于领域驱动设计（Domain Driven Design，DDD）的思想来构建。</para>
            <autoOutline />
        </introduction>

        <section address="rafyDDD">
            <title>领域实体驱动</title>
            <content>
                <para>框架中的领域实体是“富模型”，相对贫血模型而言，它不但有属性，而且还有关系，以及维护整个组合实体的行为。</para>
                <para>
                    领域实体设计是整个系统设计的源头；基于实体，设计出相应的领域服务；然后再生成数据库；再生成界面。就可以快速地开发出完整的系统。关于领域实体的详情，见：<link xlink:href="e9998e68-31e8-47d6-9e28-829aade5044e" />。
                </para>
                <para>开始领域实体编码前，需要先设计领域模型的 UML 关系图（类图）、领域服务的流程图（序列图）。然后再把 UML 图一对一转换为领域实体。以下是使用 EnterpriseArchitect(EA) 为某项目绘制的领域模型图：</para>
                <mediaLink>
                    <caption>EA 中的领域模型 UML 图</caption>
                    <image xlink:href="DDD_UMLSource"/>
                </mediaLink>
                <para>上图中的所有关系，都可以直接转换为领域实体。转换后，也可以直接在 VisualStudio 中查询相关实体的模型图，如：</para>
                <mediaLink>
                    <caption>VisualStudio 中的领域模型 UML 图</caption>
                    <image xlink:href="DDD_UMLSource_VS"/>
                </mediaLink>
                <para>
                    关于如何使用 Visual Studio 中的 Rafy 领域模型图，见：<link xlink:href="640ac9bb-0090-4b38-9763-bad4fca3adfb" />。
                </para>
                <para>
                    但是，Rafy 并没有完全按照经典 DDD 的概念来搭建。关于 Rafy 与经典 DDD 的关系，见：<link xlink:href="f4f5c2f5-638a-456a-9c8d-1e1854c63002" />。
                </para>
            </content>
        </section>

        <section address="dddArch">
            <title>开发架构</title>
            <content>
                <para>Rafy 中的开发架构采用了洋葱架构思想：</para>
                <mediaLink>
                    <caption>洋葱架构</caption>
                    <image xlink:href="DDD_OnionArchitecture"/>
                </mediaLink>
                <para>
                    关于此架构的详情，见：<externalLink>
                        <linkText>The Onion Architecture</linkText>
                        <linkUri>http://jeffreypalermo.com/blog/the-onion-architecture-part-1/</linkUri>
                    </externalLink>。
                </para>
            </content>
        </section>

        <section address="ddd">
            <title>附 - 领域驱动设计</title>
            <content>
                <para></para>
                <mediaLink>
                    <caption>DDD 组成部分</caption>
                    <image xlink:href="DDD_Components"/>
                </mediaLink>
                <!--<mediaLink>
                    <caption>DDD 分层架构图</caption>
                    <image xlink:href="DDD_Layer1"/>
                </mediaLink>-->
                <mediaLink>
                    <caption>DDD 分层架构图</caption>
                    <image xlink:href="DDD_Layer2"/>
                </mediaLink>

                <para>
                    关于 DDD 的详细概念，见 Eric Evans 的：《<externalLink>
                        <linkText>Domain-Driven Design</linkText>
                        <linkUri>http://book.douban.com/subject/1418618/</linkUri>
                    </externalLink> 》。
                </para>
            </content>
        </section>

        <relatedTopics>
        </relatedTopics>
    </developerConceptualDocument>
</topic>
