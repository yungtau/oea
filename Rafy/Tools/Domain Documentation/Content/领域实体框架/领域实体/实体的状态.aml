<?xml version="1.0" encoding="utf-8"?>
<topic id="1a5cb169-0f7c-479a-a854-88cd89478b1d" revisionNumber="1">
    <developerConceptualDocument
      xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
      xmlns:xlink="http://www.w3.org/1999/xlink">

        <introduction>
            <autoOutline/>
        </introduction>

        <section address="status">
            <title>单个实体的状态</title>
            <content>
                <para>
                    实体仓库对实体的保存操作，是通过唯一的一个 Save 方法来完成的。而具体是执行 CDU 中的哪一个操作，则由传入的实体的状态来决定。实体的状态由 <codeInline>Entity.PersistenceStatus</codeInline> 属性决定，该属性的类型是枚举 <codeInline>PersistenceStatus</codeInline>，如下：
                </para>
                <code language="cs">
                    <![CDATA[namespace Rafy.Domain
{
    /// <summary>
    /// 实体状态
    /// </summary>
    public enum PersistenceStatus
    {
        /// <summary>
        /// 未改动
        /// </summary>
        Unchanged = 0,
        /// <summary>
        /// 数据变更。仓库保存时，需要执行更新操作。
        /// </summary>
        Modified = 1,
        /// <summary>
        /// 新对象。仓库保存时，需要执行添加操作。
        /// </summary>
        New = 2,
        /// <summary>
        /// 已删除。仓库保存时，需要执行删除操作。
        /// </summary>
        Deleted = 3
    }
}]]>
                </code>
                <para>
                    单一实体对象在状态：<codeInline>New、Deleted、Modified</codeInline> 中，并通过仓库保存时，对应在数据库中执行 Insert、Delete、Update(CDU) 操作。
                </para>
                <para>
                    一些 ORM 框架实体类的实体状态中，还会额外有 Detached 或 Attached 状态，用于表示分布式应用程序环境下，实体是否已经与上下文脱离关系。而 Rafy 中的实体，本身就是脱离仓库而存在的，可直接用于分布式传输，所以没有这两个状态。（也就是说，通过仓库查询出来的实体，可直接绑定界面、传输至客户端，当界面层/客户端把修改过的实体传输回业务逻辑层并通过仓库进行保存时，无需考虑是否附加到仓库上下文中，直接保存即可。）
                </para>
                <para>
                    为了方便状态的检测，Entity 还额外定义了几个冗余的属性：<codeInline>Entity.IsDeleted、Entity.IsNew、Entity.IsModified</codeInline> 用于检测对象是否已经被删除、是否刚创建、是否已经被使用。另外，<codeInline>Entity.IsSelfDirty</codeInline> 属性用于表示本实体是否处于需要保存的状态，即以上三种状态中任一一种。
                </para>
            </content>
        </section>

        <section address="transfer">
            <title>实体状态的转换</title>
            <content>
                <para>实体状态的自动转换：</para>
                <list class="bullet">
                    <listItem>
                        <para>
                            当使用 new 操作符刚创建一个实体时，它的状态是 New；此实体如果通过仓库保存后，它的状态变更为 Unchanged。
                        </para>
                    </listItem>
                    <listItem>
                        <para>
                            一个刚从仓库中查询出来的实体，它的状态是 Unchanged；对此实体的任一属性进行修改时，它的状态自动变更为 Modified；如果继续通过仓库保存后，状态则会变回 Unchanged。
                        </para>
                    </listItem>
                    <listItem>
                        <para>
                            一个实体从实体列表中移除时（例如使用 EntityList.Remove 方法），它的状态变为 Deleted；通过仓库保存该实体后，它的状态变更为 New。（一个从仓库中完成删除后的实体，对于仓库来说，将是一个全新的实体。）
                        </para>
                    </listItem>
                </list>
                <para>
                    实体状态的手动转换：在自动维护状态的基础上，也可以通过实体的以下方法来强制直接改变实体的状态：<codeInline>MarkUnchanged()、MarkDeleted()、MarkNew()、MarkSelfDirty()</codeInline>。（注意，MarkSelfDirty 方法只会在实体状态为 Unchanged 时，把状态变更为 Modified；这样防止误把处于 New、Deleted 状态的实体直接改变为 Modified 而导致保存失败。）
                </para>
            </content>
        </section>

        <section address="comStatus">
            <title>组合实体的状态</title>
            <content>
                <para>
                    在通过实体仓库的 <codeInline>Save(Entity entity)</codeInline> 方法保存传入的实体对象时，其实是对以该实体为根的整个组合实体树进行保存。也就是说，组合实体树中任一实体状态变更时，都会被保存。
                </para>
                <para>
                    <codeInline>Entity.IsDirty</codeInline> 属性表示整个组合实体是否需要保存。当该实体或者该实体组合中的组合子实体中，任一实体的 IsSelfDirty 状态为真时，整个组合实体的 IsDrity 为真。
                </para>
                <para>
                    相应的，可以使用 <codeInline>Entity.MarkSaved()</codeInline> 方法，来把整个组合实体树中的所有实体都标记为 Unchanged 状态。
                </para>
            </content>
        </section>

        <relatedTopics>
        </relatedTopics>
    </developerConceptualDocument>
</topic>
