<?xml version="1.0" encoding="utf-8"?>
<topic id="59c80aec-c910-4880-b165-c3495ed5eb3e" revisionNumber="1">
    <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
        <summary>
            <para>在仓库中编写查询</para>
        </summary>
        <introduction>
            <autoOutline />
        </introduction>

        <section address="query">
            <title>查询模式</title>
            <content>
                <para>框架要求以一种统一的开发模式来编写实体仓库的查询方法，来兼顾本地应用、分布式应用程序的开发。不论在客户端，还是在服务端，都可以直接调用这种查询接口。这种开发模式需要两个方法：一个公有的外部接口方法，以及一个数据层查询实体方法。如下：</para>
                <code language="cs">
                    <![CDATA[public WarehouseList GetByCode(string warehouseCode)
{
    return this.FetchList(r => r.DA_GetByCode(warehouseCode));
}
private EntityList DA_GetByCode(string warehouseCode)
{
    var q = this.CreateLinqQuery();
    q = q.Where(e => e.Code == warehouseCode);
    return this.QueryList(q);
}]]>
                </code>
                <list class="bullet">
                    <listItem>
                        <para>公有外部接口</para>
                        <para>
                            这个方法是提供给外部使用的，客户端、服务都都可直接调用此方法。方法体内部使用 <codeInline>FetchList</codeInline> 方法来间接调用数据层查询方法。<codeInline>FetchList</codeInline> 方法的内部逻辑会自动判断当前位置是在服务端还是客户端。如果是客户端调用，则它会使用 WCF 服务来通过远程服务端执行数据层并提供数据；如果是在服务端，则会直接执行数据层查询方法。
                        </para>
                        <para>
                            本接口返回值只可以是以下几类：具体实体列表类型、具体的实体类型、<codeInline>int</codeInline>（查询数据条数）、<codeInline>LiteDataTable</codeInline>（轻量级数据表格类型）。它们各自对应的 Fetch 方法调用为：<codeInline>FetchList，FetchFirst，FetchCount，FetchTable</codeInline>。
                        </para>
                    </listItem>
                    <listItem>
                        <para>数据层查询方法</para>
                        <para>该方法应该设计为非公有的。命名推荐以"DA_"开头，并以外部接口方法名结尾，表明这是该外部接口方法对应的数据层查询方法。</para>
                        <para>
                            虽然外部接口可以返回四种类型，但是数据层方法只能返回两种类型：<codeInline>EntityList、LiteDataTable</codeInline> 。它们对应两类查询：实体、表格。当外部接口调用 <codeInline>FetchList，FetchFirst，FetchCount </codeInline> 三个方法查询实体列表、实体、数据行数时，属于实体类查询，数据层方法的返回值是 <codeInline>EntityList</codeInline>；而当外部接口调用 <codeInline>FetchTable</codeInline> 方法时，则对应表格类查询，数据层返回轻量级表格 <codeInline>LiteDataTable</codeInline>。
                        </para>
                        <para>数据层的返回值，是直接用于传输的值。即实体查询传输的是 <codeInline>EntityList</codeInline>，而表格查询传输的是 <codeInline>LiteDataTable</codeInline>。
                    </para>
                        <para>
                            由于实体类查询传输的都是 <codeInline>EntityList</codeInline> ，所以当实体列表传输到达客户端后，这三个接口分别返回不同的数据：</para>
                        <list class="bullet">
                            <listItem>
                                <para>FetchList</para>
                                <para>直接返回整个实体列表对象。</para>
                            </listItem>
                            <listItem>
                                <para>FetchFirst</para>
                                <para>只返回整个实体列表中的第一个实体对象。</para>
                            </listItem>
                            <listItem>
                                <para>FetchCount</para>
                                <para>返回 <codeInline>EntityList.TotalCount</codeInline> 属性。（此时，传输的实体列表中并没有实体对象。）</para>
                            </listItem>
                        </list>
                    </listItem>
                </list>
            </content>
        </section>

        <section address="demo">
            <title>四种查询示例</title>
            <content>
                <para>四种查询对应枚举 <codeInline>Rafy.Domain.FetchType</codeInline>：</para>
                <code language="cs">
<![CDATA[/// <summary>
/// 仓库返回数据的类型
/// </summary>
public enum FetchType
{
    /// <summary>
    /// 查询实体列表
    /// </summary>
    List = 0,
    /// <summary>
    /// 查询单个实体
    /// </summary>
    First = 1,
    /// <summary>
    /// 查询数据条数统计
    /// </summary>
    Count = 2,
    /// <summary>
    /// 查询数据表格
    /// </summary>
    Table = 3
}]]>
                </code>
                <list class="bullet">
                    <listItem>
                        <para>查询实体列表</para>
                        <para>外部接口调用 FetchList 方法，返回具体实体列表类型。</para>
                        <code language="cs">
                            <![CDATA[public WarehouseList GetByCode(string warehouseCode)
{
    return this.FetchList(r => r.DA_GetByCode(warehouseCode));
}
private EntityList DA_GetByCode(string warehouseCode)
{
    var q = this.CreateLinqQuery();
    q = q.Where(e => e.Code == warehouseCode);
    return this.QueryList(q);
}]]>
                        </code>
                    </listItem>
                    <listItem>
                        <para>查询单个实体</para>
                        <para>外部接口调用 FetchFirst 方法，返回具体实体类型。</para>
                        <para>查询实体个数的数据层实现中，与查询实体列表的实体层实现保持一致。如果查询出多条实体，则框架只会返回第一个实体。</para>
                        <code language="cs">
                            <![CDATA[public Warehouse GetByName(string name)
{
    return this.FetchFirst(r => r.DA_GetByName(name));
}
private EntityList DA_GetByName(string name)
{
    var q = this.CreateLinqQuery();
    q = q.Where(e => e.Name == name).OrderByDescending(e => e.CreateTime);
    return this.QueryList(q);
}]]>
                        </code>
                    </listItem>
                    <listItem>
                        <para>查询实体个数</para>
                        <para>外部接口调用 FetchCount 方法，返回整型。</para>
                        <para>查询实体个数的数据层实现中，与查询实体列表的实体层实现保持一致。框架内部会自动转换为数据行数的查询。</para>
                        <code language="cs">
                            <![CDATA[public int CountByDate(DateTime date)
{
    return this.FetchCount(r => r.DA_CountByDate(date));
}
private EntityList DA_CountByDate(DateTime date)
{
    var q = this.CreateLinqQuery();
    q = q.Where(e => e.CreateTime >= date);
    return this.QueryList(q);
}]]>
                        </code>
                    </listItem>
                    <listItem>
                        <para>查询表格数据</para>
                        <para>可返回一个简单的表格类型数据。LiteDataTable 类型是一个可直接用于网络传输的数据表格。</para>
                        <para>根据 Command Query Responsibility Segregation（命令查询职责分离，简称 CQRS）模式，复杂查询一般使用表格查询，但是返回的数据只做只读查看，不支持修改。</para>
                        <code language="cs">
                            <![CDATA[public LiteDataTable GetTableByName(string name)
{
    return this.FetchTable(r => r.DA_GetTableByName(name));
}
private LiteDataTable DA_GetTableByName(string name)
{
    FormattedSql sql = "SELECT * FROM WAREHOUSE WHERE NAME = {0}";
    sql.Parameters.Add(name);
    return this.QueryTable(sql);
}]]>
                        </code>
                        <alert class="note">
                            <para>字符串可自动隐式转换为一个 FormattedSql 类型的对象。</para>
                            <para>FormattedSql 表格格式化的 Sql 语句，为了支持多个数据库，它其中的每一个参数都使用大括号括住的数字来代替，最终会通过 ADO.NET 来使用参数化的查询，而非使用 String.Format 简单地格式化 Sql 语句。</para>
                        </alert>
                    </listItem>
                </list>
            </content>
        </section>

        <section address="queryTypes">
            <title>实体查询实现方式</title>
            <content>
                <para>在数据层实现中，对于实体查询而言，目前支持以下三种查询方式：</para>
                <list class="bullet">
                    <listItem>
                        <para>
                            <link xlink:href="c7c6d07b-bb41-4590-a2a6-8b0b49ce1c0b" />
                        </para>
                    </listItem>
                    <listItem>
                        <para>
                            <link xlink:href="02f40bcc-1ff3-4abc-b4a9-2dea57d516ce" />
                        </para>
                    </listItem>
                    <listItem>
                        <para>
                            <link xlink:href="c2eced2c-e434-4d53-a06d-fbc518fbddf5" />
                        </para>
                    </listItem>
                </list>
            </content>
        </section>

        <relatedTopics>
        </relatedTopics>
    </developerConceptualDocument>
</topic>
